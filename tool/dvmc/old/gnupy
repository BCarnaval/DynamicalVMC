#!/usr/bin/env python3

# zlib license:

# Copyright (c) 2017 Simon Verret

# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.

# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:

# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.

# The code has been slightly adapted by Maxime Charlebois


import os
import sys


def main(file: str, resolution: bool, font: str) -> None:
    """Docs
    """
    # Informative message
    print("Gnuplot automated EpsLaTeX plotting")

    header_1 = r"\documentclass[10pt]{article}\n\usepackage{vmargin,graphicx}\n"
    header_2 = r"\n\usepackage{amsmath}\n\usepackage[usenames,dvipsnames]{xcolor}\n"
    header_3 = r"\setpapersize[landscape]{USletter}\n"
    header = header_1 + header_2 + header_3

    # Manage font seclection
    if font == "MINION":
        header += r"\usepackage[fullfamily,lf,minionint]{MinionPro}"

    elif font == "TIMES":
        header += r"\usepackage{newtxtext,newtxmath}\n"

    elif font == "SANS-SERIF":
        header += r"\usepackage{cmbright}\n"

    else:
        header += r"\usepackage{txfonts}\n"

        # Manage resolution choice
        if resolution:
            print("Resolution isn't implemented yet.")

        else:
            if file[-3:] == ".gp":
                stub = file[:-3]
            else:
                print("file " + file + " does not have the right suffix!")
                exit()

                fout = open("fig.tex", 'w')
                fout.writelines(header)
                fout.writelines(
                    r"\\begin{document}\n\input plot.tex\n\end{document}\n")
                fout.close()

                os.system("gnuplot " + file)
                os.system("latex fig")
                os.system("dvips fig")
                os.system("ps2pdf fig.ps")

                os.system("pdfcrop --margins 2 fig.pdf " + stub + ".pdf")
                os.system(
                    "rm -f fig.tex fig.dvi fig.log fig.ps plot.tex plot.eps fig.eps fig.aux fig.pdf")
                os.system("pdftops -eps " + stub + ".pdf")
    return


if __name__ == "__main__":
    file = sys.argv[1]
    try:
        resolution = sys.argv[2]
    except Exception:
        resolution = False

    main(file=file, resolution=resolution)
