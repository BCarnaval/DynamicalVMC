name: dvmc
help: Command line tool to perform dynamical variationnal Monte Carlo
  calculations
version: 0.1.0

environment_variables:
  - name: dvmc_scripts_location
    help: Sets the default directory in which dVMC tools are located
    default: $HOME/.local/share/dvmc

  - name: dvmc_mpi_proc
    help: Sets the number of processors (CPUS) to use within the MPI call.
    default: "1"

commands:
  # ----------------
  # GENERATE COMMAND
  # ----------------
  - name: generate
    alias: gen
    help: Generates configuration files needed based on a global parameters input.
    args:
      - name: parameters_file
        required: true
        help: |
          Input parameters text file to be parsed defining system caracteristics.
          The file must be formatted the following way

                             [param_name_1] [param_value_1]
                             [param_name_2] [param_value_2]
                                           .
                                           .
                                           .
      - name: hopping_option
        required: false
        help: |
          Generating 'excitation.def' file using options (1, 2 or 3). The first option
          calls 'makeExcitation.py', the second 'makeExcitation_from_hopping.py' and
          the third 'makeExcitation_from_hopping_only_t.py'.

    examples:
      - dvmc generate parameters.txt 1
      - dvmc gen params 3

  # -------------------
  # GROUNDSTATE COMMAND
  # -------------------
  - name: groundstate
    alias: gs
    help: Evaluates the ground state using 'namelist.def' to access configuration files.

    flags:
      - long: --optimized
        short: -o
        help: |
          Specifies to use 'zqp_opt.dat' file in which the binary finds optimized
          dynamical parameters coefficients to proceed his calculations.

    examples:
      - dvmc groundstate
      - dvmc gs --optimized

  # ---------------
  # GREEN COMMAND
  # ---------------
  - name: green
    help: Computes the Green's function using Q-matrix representation.
    args:
      - name: processing
        help: Type of processing to do on the Q-matrix. Either 'cond',
          'svd' or 'sqrt' or empty argument for basic processing
        required: true

    flags:
      - long: --tolerance
        arg: tolerance
        help:
          Specific tolerance that determines the number of states kept for the
          calculations of the Q-matrix. The default value is 1e-10.

      - long: --use_filter
        arg: use_filter
        help: If set, modifies the number of states kept for the Q-matrix calculations.

      - long: --addtl_filter
        arg: filter_value
        help: Modifies the default value for the filter, which is 0.9.

      - long: --k_tolerance
        arg: k_tolerance
        help: Modifies the Q-matrix calculations in the 'svd' processing case.

    examples:
      - dvmc green sqrt --tolerance=0.75 --use_filter=1 --addtl_filter=0.9
      - dvmc green svd --tolerance=0.75 --k_tolerance=0.8

  # -----------
  # RUN COMMAND
  # -----------
  - name: run
    help: Runs all of the simulation's commands at once.
    args:
      - name: parameters_file
        help: Input parameters text file defining system caracteristics.
        required: true

      - name: processing
        help: Type of processing to do on the Q-matrix ('cond', 'sqrt', 'svd').
        required: true

    flags:
      - long: --tolerance
        arg: tolerance
        help:
          Specific tolerance that determines the number of states kept for the
          calculations of the Q-matrix. The default value is 1e-10.

      - long: --use_filter
        arg: use_filter
        help: If set, modifies the number of states kept for the Q-matrix calculations.

      - long: --addtl_filter
        arg: filter_value
        help: Modifies the default value for the filter, which is 0.9.

      - long: --k_tolerance
        arg: k_tolerance
        help: Modifies the Q-matrix calculations in the 'svd' processing case.

    examples:
      - dvmc run params sqrt
      - dvmc run params svd --tolerance=0.75 --k_tolerance=0.8

  # -------------
  # CLEAN COMMAND
  # -------------
  - name: clean
    help: Cleans directory by removing generated configuration/output files.

    args:
      - name: spare
        help: String containing files to save from being deleted.
        required: false

    flags:
      - long: --deep
        short: -d
        help: Clean the './output' directory from any outputed results and optimized results.

    examples:
      - dvmc clean "QCM_params.def"
      - dvmc clean --deep
      - dvmc clean -d "QCM_params.def hop.dat trans.def"
