#!/usr/bin/env bash
#
# Author: Antoine de Lagrave
# Email: antoinedelagrave@hotmail.com
# GitHub: @BCarnaval
#
# This script was generated by bashly 1.0.5 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
dvmc_usage() {
  if [[ -n $long_usage ]]; then
    printf "dvmc - Command line tool to perform dynamical variationnal Monte Carlo calculations\n"
    echo

  else
    printf "dvmc - Command line tool to perform dynamical variationnal Monte Carlo calculations\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  dvmc COMMAND\n"
  printf "  dvmc [COMMAND] --help | -h\n"
  printf "  dvmc --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Evaluates the ground state using dynamical variationnal Monte Carlo (dVMC) using 'namelist.def' file in which the configuration files are specified.\n" "$(green "groundstate")   "
  printf "  %s   Generates all '.def' input files needed based on a global parameters input\n" "$(green "generate")      "
  printf "  %s   Proceeds to dynamical calculations using 'namelist_G.def' to specifie configuration files and './output/zqp_opt.dat' file to access optimized dynamical parameters.\n" "$(green "excitations")   "
  printf "  %s   Merge binary output files\n" "$(green "process-output")"
  printf "  %s   Q-matrix calcultations\n" "$(green "qmatrix")       "
  printf "  %s   Clean current directory by removing '.def', '.dat' files generated by dvmc.\n" "$(green "clean")         "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "DVMC_SCRIPTS_LOCATION")"
    printf "    Sets the default directory in which dVMC tools are located\n"
    printf "    Default: $HOME/.local/share/dvmc\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "DVMC_MPI_PROC")"
    printf "    Sets the number of processors (CPUS) to use within the MPI call.\n"
    printf "    Default: 1\n"
    echo

  fi
}

# :command.usage
dvmc_groundstate_usage() {
  if [[ -n $long_usage ]]; then
    printf "dvmc groundstate - Evaluates the ground state using dynamical variationnal Monte Carlo (dVMC) using 'namelist.def' file in which the configuration files are specified.\n"
    echo

  else
    printf "dvmc groundstate - Evaluates the ground state using dynamical variationnal Monte Carlo (dVMC) using 'namelist.def' file in which the configuration files are specified.\n"
    echo

  fi

  printf "Alias: gs\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  dvmc groundstate [OPTIONS]\n"
  printf "  dvmc groundstate --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--optimized, -o")"
    printf "    Specifies to use 'zqp_opt.dat' file in which the binary finds optimized\n    dynamical parameters coefficients to proceed his calculations.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  dvmc groundstate\n"
    printf "  dvmc gs --optimized\n"
    echo

  fi
}

# :command.usage
dvmc_generate_usage() {
  if [[ -n $long_usage ]]; then
    printf "dvmc generate - Generates all '.def' input files needed based on a global parameters input\n"
    echo

  else
    printf "dvmc generate - Generates all '.def' input files needed based on a global parameters input\n"
    echo

  fi

  printf "Alias: gen\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  dvmc generate PARAMETERS_FILE [HOPPING_OPTION]\n"
  printf "  dvmc generate --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "PARAMETERS_FILE")"
    printf "    Input parameters text file to be parsed defining system caracteristics.\n    The file must be formatted the following way\n    \n                       [param_name_1] [param_value_1]\n                       [param_name_2] [param_value_2]\n                                     .\n                                     .\n                                     .\n"
    echo

    # :argument.usage
    printf "  %s\n" "$(blue "HOPPING_OPTION")"
    printf "    Generating 'excitation.def' file using options (1, 2 or 3). The first option\n    calls 'makeExcitation.py', the second 'makeExcitation_from_hopping.py' and\n    the third 'makeExcitation_from_hopping_only_t.py'. Those are respectively #\n    TODO Add description\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  dvmc generate parameters.txt 1\n"
    printf "  dvmc gen params 3\n"
    echo

  fi
}

# :command.usage
dvmc_excitations_usage() {
  if [[ -n $long_usage ]]; then
    printf "dvmc excitations - Proceeds to dynamical calculations using 'namelist_G.def' to specifie configuration files and './output/zqp_opt.dat' file to access optimized dynamical parameters.\n"
    echo

  else
    printf "dvmc excitations - Proceeds to dynamical calculations using 'namelist_G.def' to specifie configuration files and './output/zqp_opt.dat' file to access optimized dynamical parameters.\n"
    echo

  fi

  printf "Alias: excs\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  dvmc excitations\n"
  printf "  dvmc excitations --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  dvmc excitations\n"
    printf "  dvmc excs\n"
    echo

  fi
}

# :command.usage
dvmc_process_output_usage() {
  if [[ -n $long_usage ]]; then
    printf "dvmc process-output - Merge binary output files\n"
    echo

  else
    printf "dvmc process-output - Merge binary output files\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  dvmc process-output PREFIX\n"
  printf "  dvmc process-output --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "PREFIX")"
    printf "    Prefix of all the input files to be process and save in './output'\n    directory. The command uses this prefix to grep all of the prefix*bin\n    files and process them.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  dvmc process-output ./output/zvo_nCHAm_nAHCm_0*bin\n"
    echo

  fi
}

# :command.usage
dvmc_qmatrix_usage() {
  if [[ -n $long_usage ]]; then
    printf "dvmc qmatrix - Q-matrix calcultations\n"
    echo

  else
    printf "dvmc qmatrix - Q-matrix calcultations\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  dvmc qmatrix PROCESSING [OPTIONS]\n"
  printf "  dvmc qmatrix --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--tolerance TOLERANCE")"
    printf "    Specific tolerance that determines the number of states kept for the\n    calculations of the Q-matrix. The default value is 1e-10.\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--use_filter USE_FILTER")"
    printf "    If set, modifies the number of states kept for the Q-matrix calculations.\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--addtl_filter FILTER_VALUE")"
    printf "    Modifies the default value for the filter, which is 0.9.\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--k_tolerance K_TOLERANCE")"
    printf "    Modifies the Q-matrix calculations in the 'svd' processing case.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "PROCESSING")"
    printf "    Type of processing to do on the Q-matrix. Either 'cond', 'svd' or 'sqrt' or\n    empty argument for basic processing\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  dvmc qmatrix sqrt --tolerance=0.75 --use_filter=1 --addtl_filter=0.9\n"
    printf "  dvmc qmatrix svd --tolerance=0.75 --k_tolerance=0.8\n"
    echo

  fi
}

# :command.usage
dvmc_clean_usage() {
  if [[ -n $long_usage ]]; then
    printf "dvmc clean - Clean current directory by removing '.def', '.dat' files generated by dvmc.\n"
    echo

  else
    printf "dvmc clean - Clean current directory by removing '.def', '.dat' files generated by dvmc.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  dvmc clean [SPARE] [OPTIONS]\n"
  printf "  dvmc clean --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--deep, -d")"
    printf "    Clean the './output' directory from any outputed results and optimized\n    results.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "SPARE")"
    printf "    String containing files to save from being deleted.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  dvmc clean \"QCM_params.def\"\n"
    printf "  dvmc clean --deep\n"
    printf "  dvmc clean -d \"QCM_params.def hop.dat trans.def\"\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# :command.command_functions
# :command.function
dvmc_groundstate_command() {
  # src/groundstate_command.sh
  # Ground state command script

  run_dvmc () {
    # Constants
    N_PROC="${DVMC_MPI_PROC}"
    NAMELIST=$(find . -name "namelist.def" -type f)
    OPTIMIZED=${args[--optimized]}

    # Script
    if [ -f "${NAMELIST}" ]; then
      green_bold "[@] Static ground state numerical evaluation..."
      if [ "${OPTIMIZED}" ]; then
        if [ -f "./output/zqp_opt.dat" ]; then
          green_bold "[@] Using optimized parameters stored in './output/zqp_opt.dat'"
          mpirun -n "${N_PROC}" "${DVMC_SCRIPTS_LOCATION}"/dvmc.out "${NAMELIST}" "./output/zqp_opt.dat"
        else
          red_bold "[X] Optimized parameters: './output/zqp_opt.dat' not found in current directory."
          exit 1
        fi
      else
        mpirun -n "${N_PROC}" "${DVMC_SCRIPTS_LOCATION}"/dvmc.out "${NAMELIST}"
      fi
    else
      red_bold "[X] File named: 'namelist.def' not found in current directory."
      exit 1
    fi
  }

  run_dvmc

}

# :command.function
dvmc_generate_command() {
  # src/generate_command.sh
  # Generate command script

  generate () {
    # Generating global .def files
    PARAMS="${args[parameters_file]}"
    if [ -f "${PARAMS}" ]; then
      green_bold "[@] Generating .def files..."
      "${DVMC_SCRIPTS_LOCATION}"/init_params.py "${PARAMS}"
    else
      red_bold "[X] Input must be a file."
      exit 1
    fi

    # Generating excitation.def file
    if [ -z "${args[hopping_option]}" ]; then
      yellow_bold "[!] Skipping excitation.def"
    elif [ "${args[hopping_option]}" == 1 ]; then
      green_bold "[@] Using 'makeExcitation.py' to generate excitation.def"
      "${DVMC_SCRIPTS_LOCATION}"/makeExcitation.py

    elif [ "${args[hopping_option]}" == 2 ]; then
      green_bold "[@] Using 'makeExcitation_from_hopping.py' to generate excitation.def"
      "${DVMC_SCRIPTS_LOCATION}"/makeExcitation_from_hopping.py

    elif [ "${args[hopping_option]}" == 3 ]; then
      green_bold "[@] Using 'makeExcitation_from_hopping_only_t.py' to generate excitation.def"
      "${DVMC_SCRIPTS_LOCATION}"/makeExcitation_from_hopping_only_t.py
    fi
    green_bold "[@] .def files generated."
  }

  generate

}

# :command.function
dvmc_excitations_command() {
  # src/excitations_command.sh
  # Excitations command script

  excitations () {
    # Constants
    N_PROC="${DVMC_MPI_PROC}"
    NAMELIST_G=$(find . -name "namelist_G.def" -type f)
    OPTIMIZED=$(find ./output -name "zqp_opt.dat" -type f)

    # Script
    if [[ -f "${NAMELIST_G}" ]] && [[ -f "${OPTIMIZED}" ]]; then
      green_bold "[@] Beginning dynamical VMC calculations..."
      mpirun -n "${N_PROC}" "${DVMC_SCRIPTS_LOCATION}"/dvmc.out "${NAMELIST_G}" "${OPTIMIZED}"
    elif [[ ! -f "${NAMELIST_G}" ]]; then
      red_bold "[X] File named: 'namelist_G.def' not found in current directory."
      exit 1
    elif [[ ! -f "${OPTIMIZED}" ]]; then
      red_bold "[X] File named: './output/zqp_opt.dat' not found in current directory."
      exit 1
    else
      red_bold "[X] Neither './output/zqp_opt.dat' and 'namelist_G.def' have been found."
      exit 1
    fi
  }

  excitations

}

# :command.function
dvmc_process_output_command() {
  # src/process_output_command.sh
  # Process-output command script

  process_output () {
    # Constants
    PREFIX="${args[prefix]}"

    # Script
    green_bold "[@] Processing ${PREFIX}*bin files..."
    "${DVMC_SCRIPTS_LOCATION}"/mergeOutputBin.py "${PREFIX}"*bin
  }

  process_output

}

# :command.function
dvmc_qmatrix_command() {
  # src/qmatrix_command.sh
  # Q-matrix command script

  q_matrix () {
    # Constants
    PROCESS="${args[processing]}"
    TOL="${args[--tolerance]}"
    USE_FILTER="${args[--use_filter]}"
    TL_FILTER="${args[--addtl_filter]}"
    K_TOL="${args[--k_tolerance]}"

    # Script selection
    if [ "${PROCESS}" == "cond" ]; then
      SCRIPT=dvmc_spectrum_w_cond_number.py
    elif [ "${PROCESS}" == "svd" ]; then
      SCRIPT=dvmc_spectrum_w_SVD.py
    elif [ "${PROCESS}" == "sqrt" ]; then
      SCRIPT=dvmc_spectrum_eigh_w_sqrtS.py
    else
      red_bold "[X] The option: '${PROCESS}' isn't supported. Exiting..."
      exit 1
    fi

    # Options selection
    if [[ ! "${TOL}" ]]; then
      yellow_bold "[!] '--tolerance' not specified. Using default value: 1e-10."
      TOL=1e-10
    fi
    if [[ ! "${USE_FILTER}" ]]; then
      yellow_bold "[!] '--use_filter' not specified. Using default value: 0 (false)."
      USE_FILTER=0
    fi
    if [[ ! "${TL_FILTER}" ]]; then
      yellow_bold "[!] '--addtl_filter' not specified. Using default value: 0.9."
      TL_FILTER=0.9
    fi
    if [[ "${K_TOL}" ]] && [[ ! "${PROCESS}" == "svd" ]]; then
      red_bold "[X] '--k_tolerance' flag cannot be used with process: ${PROCESS}."
      exit 1
    fi

    green_bold "[@] Computing green function using Q-matrix using script: ${SCRIPT}..."
    if [ ! "${K_TOL}" ]; then
      "${DVMC_SCRIPTS_LOCATION}"/"${SCRIPT}" spectrumpara.def output "${TOL}" "${USE_FILTER}" "${TL_FILTER}"
    else
      "${DVMC_SCRIPTS_LOCATION}"/"${SCRIPT}" spectrumpara.def output "${TOL}" "${USE_FILTER}" "${TL_FILTER}" "${K_TOL}"
    fi
    green_bold "[@] Green's function calculations done."
  }

  q_matrix

}

# :command.function
dvmc_clean_command() {
  # src/clean_command.sh
  # Clean command script

  clean () {
    # Constants
    SPACE_IFS=' '
    OLD_IFS=$IFS

    if [[ "${args[spare]}" ]]; then
      yellow_bold "[!] Saved files: ${args[spare]}"

      # Reading prompt
      IFS=${SPACE_IFS}
      read -a SPARE <<< "${args[spare]}"

      # Saving those poor files...
      mkdir save
      for file in "${SPARE[@]}"; do
        if [[ -f ${file} ]]; then
          cp ${file} ./save/${file}
        else
          yellow_bold "[!] ${file} doesn't exist."
        fi
      done

      # Restoring IFS variable
      IFS=${OLD_IFS}
    fi

    # Defining trash files
    TRASH=$(find . -type f -maxdepth 1 -name "*.def" -o -name "*.dat" -o -name "*.npy" -o -name "sec")
    OUTPUT_TRASH=$(find ./output -type f)

    # Script
    if [[ -z "${TRASH}" ]]; then
      yellow_bold "[!] Nothing to clean in current directory."
    else
      green_bold "[@] Removing '.def', '.dat' and '.npy' generated files..."
      rm -fv ${TRASH}
    fi

    if [[ -d ./save ]]; then
      for file in ./save/*; do
        NAME=$(basename ${file})
        cp ${file} ./${NAME}
      done

      rm -rf ./save
    fi

    if [[ "${args[--deep]}" ]] || [[ "${args[-d]}" ]]; then
      if [[ -z "${OUTPUT_TRASH}" ]]; then
        yellow_bold "[!] Nothing to clean in './output' directory."
        exit 0
      else
        yellow_bold "[!] Cleaning './output' directory..."
        rm -vf ${OUTPUT_TRASH}
      fi
    fi
    green_bold "[@] Cleaning done."
  }

  clean

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        dvmc_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export DVMC_SCRIPTS_LOCATION="${DVMC_SCRIPTS_LOCATION:-$HOME/.local/share/dvmc}"
  export DVMC_MPI_PROC="${DVMC_MPI_PROC:-1}"

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    groundstate | gs)
      action="groundstate"
      shift
      dvmc_groundstate_parse_requirements "$@"
      shift $#
      ;;

    generate | gen)
      action="generate"
      shift
      dvmc_generate_parse_requirements "$@"
      shift $#
      ;;

    excitations | excs)
      action="excitations"
      shift
      dvmc_excitations_parse_requirements "$@"
      shift $#
      ;;

    process-output)
      action="process-output"
      shift
      dvmc_process_output_parse_requirements "$@"
      shift $#
      ;;

    qmatrix)
      action="qmatrix"
      shift
      dvmc_qmatrix_parse_requirements "$@"
      shift $#
      ;;

    clean)
      action="clean"
      shift
      dvmc_clean_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dvmc_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dvmc_groundstate_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dvmc_groundstate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="groundstate"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --optimized | -o)

        # :flag.case_no_arg
        args['--optimized']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dvmc_generate_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dvmc_generate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="generate"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['parameters_file']+x} ]]; then

          args['parameters_file']=$1
          shift
        elif [[ -z ${args['hopping_option']+x} ]]; then

          args['hopping_option']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['parameters_file']+x} ]]; then
    printf "missing required argument: PARAMETERS_FILE\nusage: dvmc generate PARAMETERS_FILE [HOPPING_OPTION]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
dvmc_excitations_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dvmc_excitations_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="excitations"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dvmc_process_output_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dvmc_process_output_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="process-output"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['prefix']+x} ]]; then

          args['prefix']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['prefix']+x} ]]; then
    printf "missing required argument: PREFIX\nusage: dvmc process-output PREFIX\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
dvmc_qmatrix_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dvmc_qmatrix_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="qmatrix"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --tolerance)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--tolerance']="$2"
          shift
          shift
        else
          printf "%s\n" "--tolerance requires an argument: --tolerance TOLERANCE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --use_filter)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--use_filter']="$2"
          shift
          shift
        else
          printf "%s\n" "--use_filter requires an argument: --use_filter USE_FILTER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --addtl_filter)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--addtl_filter']="$2"
          shift
          shift
        else
          printf "%s\n" "--addtl_filter requires an argument: --addtl_filter FILTER_VALUE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --k_tolerance)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--k_tolerance']="$2"
          shift
          shift
        else
          printf "%s\n" "--k_tolerance requires an argument: --k_tolerance K_TOLERANCE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['processing']+x} ]]; then

          args['processing']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['processing']+x} ]]; then
    printf "missing required argument: PROCESSING\nusage: dvmc qmatrix PROCESSING [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
dvmc_clean_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dvmc_clean_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="clean"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --deep | -d)

        # :flag.case_no_arg
        args['--deep']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['spare']+x} ]]; then

          args['spare']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export DVMC_SCRIPTS_LOCATION="${DVMC_SCRIPTS_LOCATION:-$HOME/.local/share/dvmc}"
  export DVMC_MPI_PROC="${DVMC_MPI_PROC:-1}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "groundstate") dvmc_groundstate_command ;;
    "generate") dvmc_generate_command ;;
    "excitations") dvmc_excitations_command ;;
    "process-output") dvmc_process_output_command ;;
    "qmatrix") dvmc_qmatrix_command ;;
    "clean") dvmc_clean_command ;;
  esac
}

initialize
run "$@"
